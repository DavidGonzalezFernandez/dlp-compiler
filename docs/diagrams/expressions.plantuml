@startuml Expressions
skinparam style strictuml
skinparam monochrome true


interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface Expression {
    type: Type
}
ASTNode <|-- Expression


class IntLiteral {
    value: int
}
Expression <|.. IntLiteral


class DoubleLiteral {
    value: double
}
Expression <|.. DoubleLiteral


class CharLiteral {
    value: char
}
Expression <|.. CharLiteral


class Variable {
    name: String
    definition: VarDefinition
}
Expression <|.. Variable


class ArithmeticOperation {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}
Expression <|.. ArithmeticOperation
ArithmeticOperation o-- "2" Expression


' La conversión explícita a tipos simples se podrá realizar usando la palabra clave as
class Cast {
    variableName: String    /'TODO ¿es un String o una expresión?'/
    newType: Type   /'Tiene que ser de tipo simple'/
}
Expression <|.. Cast


' Las operaciones NOT y MINUS no se ponen en la misma clase
class NotOperation {
    ' No necesita especificar el operador
    expression: Expression
}
Expression <|.. NotOperation


class MinusOperation {
    ' No necesita especificar el operador
    expression: Expression
}
Expression <|.. MinusOperation


' Operaciones de comparación y lógicas no son iguales
class LogicOperation {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}
Expression <|.. LogicOperation


class ComparisonOperation {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}
Expression <|.. ComparisonOperation


' Una función puede no devolver nada, tiene tipo de retorno Void
' Se puede invocar a una función y no almacenar lo que devuelve
' Sea como sea, devuelve algo, así que es una expresión
class FunctionInvocation {
    arguments: LIst<Expression>
}
Expression <|.. FunctionInvocation


class ArrayIndexing {
    array: Expression       /'TODO qué tipo es'/
    index: Expression
}
Expression <|.. ArrayIndexing


class FieldAccess {
    struct: Expression      /'TODO qué tipo es'/
    field: String
}
Expression <|.. FieldAccess


@enduml
