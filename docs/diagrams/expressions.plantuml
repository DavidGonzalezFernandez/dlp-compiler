@startuml Expressions
skinparam style strictuml
skinparam monochrome true


interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface Expression {
    type: Type
}

class IntLiteral {
    value: int
}

class DoubleLiteral {
    value: double
}

class Variable {
    name: String
    definition: VarDefinition
}

class ArithmeticOperation {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}

class CharLiteral {
    value: char
}

' La conversión explícita a tipos simples se podrá realizar usando la palabra clave as
class Cast {
    variableName: String
    newType: Type   /'Tiene que ser de tipo simple'/
}

class NotOperation {
    ' No necesita especificar el operador
    expression: Expression
}

class MinusOperation {
    ' No necesita especificar el operador
    expression: Expression
}

class LogicOperation {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}

class ComparisonOperation {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}

class Invocation {
    arguments: LIst<Expression>
}

class Indexing {
    array: Expression       /'TODO qué tipo es'/
    index: Expression
}

class FieldAccess {
    struct: Expression      /'TODO qué tipo es'/
    field: String
}

ASTNode <|-- Expression
Expression <|.. IntLiteral
Expression <|.. DoubleLiteral
Expression <|.. CharLiteral
Expression <|.. Variable
Expression <|.. NotOperation
Expression <|.. MinusOperation
Expression <|.. LogicOperation
Expression <|.. ArithmeticOperation
Expression <|.. Invocation
Expression <|.. Cast

ArithmeticOperation o-- "2" Expression


@enduml
