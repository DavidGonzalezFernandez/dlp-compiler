@startuml Statements
skinparam style strictuml
skinparam monochrome true

interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface Statement
ASTNode <|-- Statement


/'
Una sentencia condicional se define usando la palabra clave if seguida de una condición.
El cuerpo de dicha sentencia estará comprendido entre do y end.
Se podrá usar la palabra clave else.
'/
class IfElse {
    condition: Expression
    ifBody: List<Statement>
    elseBody: List<Statement>   /'puede no haber else, la lista estaría vacía'/
}
Statement <|.. IfElse
IfElse o-- "1" Expression
IfElse o-- "0..n" Statement


class While {
    condition: Expression
    body: List<Statement>
}
Statement <|.. While
While o-- "1" Expression
While o-- "0..n" Statement


' El return debe estar seguido obligatoriamente de una expresión
class Return {
    returnExpression: Expression
}
Statement <|.. Return
Return o-- "1" Expression


' Return para cuando no se devuelve una expresión
class ReturnVoid
Statement <|.. ReturnVoid


' Write no tiene una lista de Expression, se genera un Write para cada Expression
class WriteStatement {
    expression: Expression
}
Statement <|.. WriteStatement
WriteStatement o-- "1" Expression


class ReadStatement {
    expression: Expression
}
Statement <|.. ReadStatement
ReadStatement o-- "1" Expression

' Una asignación está compuesta por dos expresiones separadas por el operador =.
class Assignment {
    leftExpression: Expression
    value: Expression
}
Statement <|.. Assignment
Assignment o-- "2" Expression

@enduml
