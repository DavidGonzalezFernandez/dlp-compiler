@startuml Types
skinparam style strictuml
skinparam monochrome true

interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface Type

ASTNode <|-- Type

'Los tipos simples son: int, double, char
Type <|.. IntType
class IntType

class DoubleType
Type <|.. DoubleType

class CharType
Type <|.. CharType


' Los tipos complejos son Arrays y Structs

/' Los arrays pueden ser creados usando [] para construir un tipo nuevo,
debiendo especificar el tamaño del array, previo a su tipo, en su construcción '/
class ArrayType {
    size: int
    type: Type
    ' Un array no necesita guardar una lista de sus elementos, se guardan en memoria
    ' TODO: ¿es correcto lo que digo?
}
Type <|.. ArrayType


class StructField {
    name: String
    type: Type
}
Type <|.. StructField


' Un registro se puede crear usando la palabra clave defstruct y definiendo una secuencia de variables
class StructType {
    fields: List<StructField>   /'¿Por qué este tipo concreto?'/
}
Type <|.. StructType
StructType o-- "0-n" StructField


class FunctionType {
    params: VarDefinition
    returnType: Type    /'Sólo se devuelven tipos simples'/
}
Type <|.. FunctionType


' Las funciones tienen un tipo de retorno, pero pueden no devolver nada
' Se necesita el tipo Void
class VoidType
Type <|.. VoidType

@enduml
