@startuml Types
skinparam style strictuml
skinparam monochrome true

interface ASTNode {
    getLine(): int
    getColumn(): int
}

interface CompilerType

ASTNode <|-- CompilerType

'Los tipos simples son: int, double, char
CompilerType <|.. IntType
class IntType

class DoubleType
CompilerType <|.. DoubleType

class CharType
CompilerType <|.. CharType


' Los tipos complejos son Arrays y Structs

/' Los arrays pueden ser creados usando [] para construir un tipo nuevo,
debiendo especificar el tamaño del array, previo a su tipo, en su construcción '/
class ArrayType {
    size: int
    type: CompilerType
}
CompilerType <|.. ArrayType


class StructField {
    name: String
    type: CompilerType
}
CompilerType <|.. StructField


' Un registro se puede crear usando la palabra clave defstruct y definiendo una secuencia de variables
class StructType {
    fields: List<StructField>   /'¿Por qué este tipo concreto?'/
}
CompilerType <|.. StructType
StructType o-- "0-n" StructField


class FunctionType {
    params: VarDefinition
    returnType: CompilerType    /'Sólo se devuelven tipos simples'/
}
CompilerType <|.. FunctionType


' Las funciones tienen un tipo de retorno, pero pueden no devolver nada
' Se necesita el tipo Void
class VoidType
CompilerType <|.. VoidType

@enduml
